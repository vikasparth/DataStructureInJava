package com.vikas.crackingcodinginterview;

public class LinkedListVik {
	
	public Node header;
	public Node tail;
	
	public LinkedListVik()
	{
		header = null;
		tail = null;
	}
	
	public LinkedListVik(int data)
	{
		this.header = new Node();
		this.header.data= data;
		this.tail = this.header;
	}
public void addatstart(int data)
{
	Node n = new Node(data);
	if(this.isempty())
	{
		this.header = n;
		this.tail = n;
	}
	else
	{
	n.next = header;
	header = n;
	}
}

public void addatend(int data)
{
  Node n = new Node(data);
  tail.next = n;
  tail= n;
  tail.next=null; 
}

public void addbefore(int data1, int data2)
{
 if(this.isempty())
 {
	 System.out.println("The String is Empty");
	 return;
 }
 Node n = new Node();
 n = this.header;
 while(n.data!=data1 || n.next!=null)
 {
	 n = n.next;
 }
 if(n.data==data1)
 {
	 Node add = new Node(data2);
	 if(n==header)
	 {
		 add.next = header;
		 header = add;
	 }
	 else if(n==tail)
	 {
		 
	 }
	
	 n.prev.next = add;
	 add.next = n;
 }
 else
 {
	 System.out.format("Given number %d was not found in the linked list",data1);
 }

}

public void addafter(int data1, int data2)
{
	
	if(this.isempty())
	 {
		 System.out.println("The String is Empty");
		 return;
	 }
	 Node n = new Node();
	 n = this.header;
	 while(n.data!=data1 || n.next!=null)
	 {
		 n = n.next;
	 }
	 
	 if(n.data==data1)
	 {
		 Node add = new Node(data2);
		
		 if(n==header || n==tail)
		 {	
			 if(header==tail)
			 {
				 add.next = header.next;
				 header.next = add;
				 tail = add;
			 }
			 else
			 {
			 if(n==header)
			 {
			 add.next = header.next;
			 header.next = add;
			 }
			 if(n==tail)
			 {
				 tail.next = add;
				 add.next = null;
			 }
			 }
		 }
	
		 else
		 {
		
		 add.next = n.next;
		 n.next.prev = add;
		 n.next = add;	
		 }
	 }
	 else
	 {
		 System.out.format("Given number %d was not found in the linked list",data1);
	 }
}

public void removefirstnode()
{
	if(this.isempty())
	 {
		 System.out.println("The String is Empty");
		 return;
	 }
	if(header==tail&&header!=null)
	{
		header = tail = null;
	}
	else
	{
		header = header.next;
	}	
}

public void removelastnode()
{
	if(this.isempty())
	 {
		 System.out.println("The String is Empty");
		 return;
	 }
	if(header==tail&&header!=null)
	{
		header = tail = null;
	}
	else
	{
		tail = tail.prev;
	}	
}


public boolean contains(int dataparam)
{
	if(this.isempty())
	 {
		 System.out.println("The String is Empty");
		 return false;
	 }
	Node n = header;
	while(n!=null)
	{
		if(n.data==dataparam)
		{
			return true;
		}
		n=n.next;
	}
	return false;
}
	
public boolean isempty()
{
 if(header==null)
 {
	 return true;
 }
 else
 {
	 return false;
 }
}

public boolean isSingleLength()
{
 if(header==tail && header!=null)
 {
	 return true;
 }
 else
 {
	 return false;
 }
}

}
